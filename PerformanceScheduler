/**
 * Main function to schedule performances with multiple variations
 * @param {number} maxInRow - Maximum consecutive performances (default: 1)
 * @param {number} variations - Number of schedules to generate (default: 3)
 */
function schedulePerformances(maxInRow = 1, variations = 3) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  let inputSheet = ss.getSheetByName('Performer Schedule Input');
  if (!inputSheet) {
    inputSheet = ss.getActiveSheet();
    if (!inputSheet) {
      ui.alert('Error', 'Please create a sheet named "Performer Schedule Input" or select your data sheet before running.', ui.ButtonSet.OK);
      return;
    }
    ui.alert('Notice', 'Using active sheet since "Performer Schedule Input" not found', ui.ButtonSet.OK);
  }

  try {
    if (inputSheet.getLastRow() < 2) {
      throw new Error('Input sheet must contain at least one dance (header row + data)');
    }

    const { performances, allPerformers } = getInputData(inputSheet);

    for (let v = 1; v <= variations; v++) {
      const sheetName = `Performance Schedule ${v}`;
      let outputSheet = ss.getSheetByName(sheetName);
      if (outputSheet) ss.deleteSheet(outputSheet);
      outputSheet = ss.insertSheet(sheetName);
      generateScheduleVariation(v, performances, allPerformers, maxInRow, ss);
    }

    createComparisonSheet(ss, variations);
    ui.alert('Success', `Generated ${variations} schedule variations!`, ui.ButtonSet.OK);

  } catch (e) {
    ui.alert('Error', e.message, ui.ButtonSet.OK);
    console.error(e);
  }
}

function generateScheduleVariation(variationNum, performances, allPerformers, maxInRow, ss) {
  const outputSheet = ss.getSheetByName(`Performance Schedule ${variationNum}`);
  if (!outputSheet) {
    throw new Error(`Could not create output sheet for variation ${variationNum}`);
  }

  // Set headers
  outputSheet.getRange(1, 1, 1, 4).setValues([['Order', 'Performance Name', 'Performers', 'Warnings']]);

  const first = performances.filter(p => p.constraint === 'first');
  const last = performances.filter(p => p.constraint === 'last');
  let middle = performances.filter(p => !p.constraint || (p.constraint !== 'first' && p.constraint !== 'last'));
  
  middle = shuffleArray(middle, variationNum);
  const scheduled = [...first];
  const warnings = [];

  const remaining = [...middle];
  while (remaining.length > 0) {
    let idx = findNextPerformanceIndex(remaining, scheduled, allPerformers, maxInRow, variationNum);
    if (idx === -1) idx = 0;
    
    const [next] = remaining.splice(idx, 1);
    scheduled.push(next);

    const warning = checkViolation(next, scheduled, allPerformers);
    if (warning) {
      warnings.push({ performance: next.name, message: warning });
    }
  }

  scheduled.push(...last);

  // Prepare data for output sheet, including performers aligned with performances
  const outputData = scheduled.map((performance, index) => [
    index + 1,
    performance.name,
    performance.performers.join(', '),
    warnings.find(w => w.performance === performance.name)?.message || ''
  ]);

  if (outputData.length > 0) {
    outputSheet.getRange(2, 1, outputData.length, 4).setValues(outputData);
  }

  // Add summary info below schedule
  const summaryRow = outputData.length + 3;
  outputSheet.getRange(summaryRow, 1).setValue(`Schedule Variation ${variationNum}`);
  outputSheet.getRange(summaryRow + 1, 1).setValue(`Total Warnings: ${warnings.length}`);
  outputSheet.getRange(summaryRow + 2, 1).setValue(`Violation Score: ${calculateViolationScore(scheduled, allPerformers, maxInRow)}`);

  outputSheet.autoResizeColumns(1, 4);
  outputSheet.getRange(1, 1, 1, 4).setBackground('#dddddd').setFontWeight('bold');
}

function getInputData(inputSheet) {
  const inputRange = inputSheet.getDataRange();
  const inputData = inputRange.getValues();
  const headers = inputData[0].map(h => h.toString().toLowerCase().trim());

  const nameIndex = headers.includes('performance name') ? headers.indexOf('performance name') : 0;
  const performersIndex = headers.includes('performers') ? headers.indexOf('performers') : 1;
  const constraintsIndex = headers.includes('constraints') ? headers.indexOf('constraints') : -1;
  const spacingIndex = headers.includes('minimum spacing') ? headers.indexOf('minimum spacing') : -1;

  const performances = [];
  const allPerformers = new Set();
  
  for (let i = 1; i < inputData.length; i++) {
    const row = inputData[i];
    if (!row[nameIndex] && !row[performersIndex]) continue;

    try {
      const name = row[nameIndex] ? row[nameIndex].toString().trim() : `Performance ${i}`;
      const performers = row[performersIndex] ? row[performersIndex].toString().split(',').map(p => p.trim()).filter(p => p) : [];
      const constraint = constraintsIndex >= 0 && row[constraintsIndex] ? row[constraintsIndex].toString().toLowerCase().trim() : '';
      const spacing = spacingIndex >= 0 && !isNaN(row[spacingIndex]) ? parseInt(row[spacingIndex], 10) : 1;

      performances.push({ name, performers, constraint, spacing });
      performers.forEach(p => {
        if (p.toLowerCase() !== 'all') {
          allPerformers.add(p);
        }
      });
    } catch (e) {
      console.warn(`Error processing row ${i + 1}: ${e}`);
    }
  }

  if (performances.length === 0) {
    throw new Error('No valid performances found in input sheet');
  }

  return { performances, allPerformers };
}

function shuffleArray(array, seed) {
  const shuffled = [...array];
  let random = Math.sin(seed) * 10000 % 1;
  
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(random * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    random = Math.sin(random) * 10000 % 1;
  }
  return shuffled;
}

function findNextPerformanceIndex(performances, scheduled, allPerformers, maxInRow, variationNum) {
  if (!performances.length) return -1;

  switch (variationNum % 3) {
    case 1:
      return performances.map((p, i) => ({ i, score: calculateScore(p, scheduled, allPerformers, maxInRow) }))
        .sort((a, b) => b.score - a.score)[0].i;

    case 2:
      const scores = performances.map(p => Math.max(1, calculateScore(p, scheduled, allPerformers, maxInRow) + 2));
      const total = scores.reduce((a, b) => a + b, 0);
      let rand = Math.random() * total;
      for (let i = 0, sum = 0; i < scores.length; i++) {
        sum += scores[i];
        if (rand <= sum) return i;
      }
      return 0;

    default:
      const top3 = performances.map((p, i) => ({ i, score: calculateScore(p, scheduled, allPerformers, maxInRow) }))
        .sort((a, b) => b.score - a.score).slice(0, 3);
      return top3[Math.floor(Math.random() * top3.length)].i;
  }
}

function calculateScore(performance, scheduled, allPerformers, maxInRow) {
  if (!scheduled.length) return 0;
  const last = scheduled[scheduled.length - 1];
  const common = getCommonPerformers(performance, last, allPerformers);
  return -common.length;
}

function getCommonPerformers(p1, p2, allPerformers) {
  const list1 = getPerformerList(p1.performers, allPerformers);
  const list2 = getPerformerList(p2.performers, allPerformers);
  return list1.filter(p => list2.includes(p));
}

function getPerformerList(performers, allPerformers) {
  return performers.includes('All') ? Array.from(allPerformers) : performers;
}

function checkViolation(performance, scheduled, allPerformers) {
  const spacing = performance.spacing || 1;
  if (scheduled.length <= spacing) return null;

  const recent = scheduled.slice(-(spacing + 1));
  const allRecent = new Set();
  
  recent.forEach(p => {
    getPerformerList(p.performers, allPerformers).forEach(pr => allRecent.add(pr));
  });

  const violations = [];
  allRecent.forEach(p => {
    let count = 0;
    recent.forEach(r => {
      if (getPerformerList(r.performers, allPerformers).includes(p)) {
        count++;
      }
    });
    if (count > 1) {
      violations.push(p);
    }
  });

  return violations.length > 0
    ? `Performer(s) ${violations.join(', ')} appear within ${spacing} dances`
    : null;
}

function calculateViolationScore(scheduled, allPerformers, maxInRow) {
  let score = 0;

  for (let i = 0; i < scheduled.length; i++) {
    const current = scheduled[i];
    const spacing = current.spacing || 1;
    const windowStart = Math.max(0, i - spacing);
    const window = scheduled.slice(windowStart, i + 1);

    const allRecent = new Set();
    window.forEach(p => {
      getPerformerList(p.performers, allPerformers).forEach(pr => allRecent.add(pr));
    });

    allRecent.forEach(p => {
      let count = 0;
      window.forEach(r => {
        if (getPerformerList(r.performers, allPerformers).includes(p)) {
          count++;
        }
      });
      if (count > 1) {
        score += (count - 1) * 10;
      }
    });
  }

  return score;
}

function createComparisonSheet(ss, variations) {
  let sheet = ss.getSheetByName('Schedule Comparison');
  if (!sheet) sheet = ss.insertSheet('Schedule Comparison');
  else sheet.clear();

  sheet.getRange(1, 1).setValue('Comparison of Schedule Variations');
  const headers = ['Variation', 'Total Warnings', 'Violation Score', 'First 3 Performances', 'Last 3 Performances'];
  sheet.getRange(3, 1, 1, headers.length).setValues([headers]).setBackground('#dddddd').setFontWeight('bold');

  const data = [];

  for (let v = 1; v <= variations; v++) {
    const s = ss.getSheetByName(`Performance Schedule ${v}`);
    if (!s) continue;

    const vals = s.getDataRange().getValues();
    const names = vals.slice(1).map(r => r[1]).filter(n => n);
    const warningCount = vals.slice(1).filter(r => r[3]).length;
    const score = calculateViolationScoreFromNames(names, ss);

    data.push([v, warningCount, score, names.slice(0, 3).join(', '), names.slice(-3).join(', ')]);
  }

  if (data.length) {
    sheet.getRange(4, 1, data.length, data[0].length).setValues(data);
    sheet.autoResizeColumns(1, headers.length);
  }
}

function calculateViolationScoreFromNames(performanceNames, ss) {
  const inputSheet = ss.getSheetByName('Performer Schedule Input');
  const { performances, allPerformers } = getInputData(inputSheet);

  const nameMap = {};
  performances.forEach(p => nameMap[p.name] = p);

  const scheduled = performanceNames.map(n => nameMap[n]).filter(Boolean);
  return calculateViolationScore(scheduled, allPerformers, 1);
}
